jrnl_0307hyp_t <- addmargins(jrnl_0307hyp_t ,margin=2) #adding row margins
jrnl_0307hyp_m <- as.matrix(jrnl_0307hyp_t)
jrnl_0307hyp_p <- with(Hyp_all_jrnl_exact_0307, table(Journal, pval_03_07)) %>%
prop.table(margin = 1) #proportion table
jrnl_0307hyp_p100 <- jrnl_0307hyp_p *100 #turning proportions into percentages
jrnl_0307hyp_p100 <- addmargins(jrnl_0307hyp_p100 ,margin=2) #adding row margins
#P-values in the range (.03 - .07] and year
yr_0307hyp_t <- xtabs(~ Year+pval_03_07, data=Hyp_all_jrnl_exact_0307) #frequency table
yr_0307hyp_t <- addmargins(yr_0307hyp_t, margin=2) #adding row margins
yr_0307hyp_m <- as.matrix(yr_0307hyp_t)
yr_0307hyp_p <- with(Hyp_all_jrnl_exact_0307, table(Year, pval_03_07)) %>%
prop.table(margin = 1) #proportion table
yr_0307hyp_p100 <- yr_0307hyp_p *100 #turning proportions into percentages
yr_0307hyp_p100 <- addmargins(yr_0307hyp_p100 ,margin=2) #adding row margins
#Total of p-values in the range (.03 - .07]
tot_0307hyp_t <- table(Hyp_all_jrnl_exact_0307$pval_03_07) #frequency table
tot_0307hyp_sum <- sum(tot_0307hyp_t) #calculating the total frequency
tot_0307hyp_tp <- round(100*prop.table(tot_0307hyp_t),digits=3) #proportion table
tot_0307hyp_p <- addmargins(tot_0307hyp_tp) #adding row margin
#Frequencies
jrnl_pb_hyp <- cbind(jrnl_0406hyp_m, jrnl_0307hyp_m) #binding tables with data on journals
yr_pb_hyp <- cbind(yr_0406hyp_m, yr_0307hyp_m) #binding tables with data on years
tot_pb_hyp <- rbind(jrnl_pb_hyp, yr_pb_hyp, c(tot_0406hyp_t, tot_0406hyp_sum, tot_0307hyp_t, tot_0307hyp_sum)) #table
rownames(tot_pb_hyp)[7] <- "Total" #naming the 'total' row
tot_pb_hyp <- as.data.frame(tot_pb_hyp) #converting to data frame
names(tot_pb_hyp)[3] <- c("total") #changing column names
names(tot_pb_hyp)[6] <- c("total") #changing column names
#Percentages
jrnl_m_perc_hyp <- cbind(jrnl_0406hyp_p100, jrnl_0307hyp_p100) #binding tables with data on journals
yr_m_perc_hyp <- cbind(yr_0406hyp_p100, yr_0307hyp_p100) #binding tables with data on years
tot_pb_perc_hyp <- rbind(jrnl_m_perc_hyp, yr_m_perc_hyp, c(tot_0406hyp_p, tot_0307hyp_p)) #table
rownames(tot_pb_perc_hyp)[7] <- "Total" #naming the 'total' row
tot_pb_perc_hyp <- as.data.frame(tot_pb_perc_hyp) #converting to data frame
names(tot_pb_perc_hyp)[3] <- c("total") #changing column names
names(tot_pb_perc_hyp)[6] <- c("total") #changing column names
tot_pb_hyp %>%
kable(format = "html", align = "c", caption = "<b>Table 17. Publication bias (frequencies)<b>") %>% #format html, centered alignment, bold-faced caption
column_spec (4, border_left = F, border_right = T, extra_css = "border-right:2px solid lightgrey;")%>% #vertical, solid lightgrey line separates binwidths
kable_styling(bootstrap_options = "striped", full_width = F) #styling
tot_pb_perc_hyp %>%
kable(format = "html", align = "c", caption = "<b>Table 18. Publication bias (%)<b>", digits = 1) %>% #format html, centered alignment, bold-faced caption
column_spec (4, border_left = F, border_right = T, extra_css = "border-right:2px solid lightgrey;")%>% #vertical, solid lightgrey line separates binwidths
kable_styling(bootstrap_options = "striped", full_width = F) #styling
Hyp_all_jrnl_exact_0305 <- subset(Hyp_all_jrnl_exact, Reported.P.Value > .03 & Reported.P.Value <= .05) #subset of 'Hyp' with all exactly reported p-values in the range (.03 - .05]
Hyp_all_jrnl_exact_0305["pval_03_05"] <- NA #new column in which it will be indicated whether a result is just significant or not
nhyp_exact_0305 <- nrow(Hyp_all_jrnl_exact_0305) #object containing the number of rows
nhyp_exact_0305 #n = 14
Hyp_all_jrnl_exact_0305 <- Hyp_all_jrnl_exact_0305 %>% mutate(pval_03_05 = ifelse(Reported.P.Value <= .04, "(.03-.04]", "(.04-.05]")) #indicating just (non-)significance
#P-values in the range (.03 - .05] and journal
jrnl_0305hyp_t <- xtabs(~ Journal+pval_03_05, data=Hyp_all_jrnl_exact_0305) #frequency table
jrnl_0305hyp_t <- addmargins(jrnl_0305hyp_t ,margin=2) #adding row margins
jrnl_0305hyp_m <- as.matrix(jrnl_0305hyp_t)
jrnl_0305hyp_p <- with(Hyp_all_jrnl_exact_0305, table(Journal, pval_03_05)) %>%
prop.table(margin = 1) #proportion table
jrnl_0305hyp_p100 <- jrnl_0305hyp_p *100 #turning proportions into percentages
jrnl_0305hyp_p100 <- addmargins(jrnl_0305hyp_p100 ,margin=2) #adding row margins
#P-values in the range (.03 - .05] and year
yr_0305hyp_t <- xtabs(~ Year+pval_03_05, data=Hyp_all_jrnl_exact_0305) #frequency table
yr_0305hyp_t <- addmargins(yr_0305hyp_t, margin=2) #adding row margins
yr_0305hyp_m <- as.matrix(yr_0305hyp_t)
yr_0305hyp_p <- with(Hyp_all_jrnl_exact_0305, table(Year, pval_03_05)) %>%
prop.table(margin = 1) #proportion table
yr_0305hyp_p100 <- yr_0305hyp_p *100 #turning proportions into percentages
yr_0305hyp_p100 <- addmargins(yr_0305hyp_p100 ,margin=2) #adding row margins
#Total of p-values in the range (.03 - .05]
tot_0305hyp_t <- table(Hyp_all_jrnl_exact_0305$pval_03_05) #frequency table
tot_0305hyp_sum <- sum(tot_0305hyp_t) #calculating the total frequency
tot_0305hyp_tp <- round(100*prop.table(tot_0305hyp_t),digits=3) #proportion table
tot_0305hyp_p <- addmargins(tot_0305hyp_tp) #adding row margin
Hyp_all_jrnl_exact_0105 <- subset(Hyp_all_jrnl_exact, Reported.P.Value > .01 & Reported.P.Value <= .05) #subset of 'Hyp' with exactly reported p-values in the range (.01 - .05]
Hyp_all_jrnl_exact_0105["pval_01_05"] <- NA #new column indicating just (non-)significance
nhyp_exact_0105 <- nrow(Hyp_all_jrnl_exact_0105) #object containing the number of rows
nhyp_exact_0105 #n = 37
Hyp_all_jrnl_exact_0105 <- Hyp_all_jrnl_exact_0105 %>% mutate(pval_01_05 = ifelse(Reported.P.Value <= .04, "(.01-.04]", "(.04-.05]")) #indicating just (non-)significance
#P-values in the range (.01 - .05] and journal
jrnl_0105hyp_t <- xtabs(~ Journal+pval_01_05, data=Hyp_all_jrnl_exact_0105) #frequency table
jrnl_0105hyp_t <- addmargins(jrnl_0105hyp_t ,margin=2) #adding row margins
jrnl_0105hyp_m <- as.matrix(jrnl_0105hyp_t)
jrnl_0105hyp_p <- with(Hyp_all_jrnl_exact_0105, table(Journal, pval_01_05)) %>%
prop.table(margin = 1) #proportion table
jrnl_0105hyp_p100 <- jrnl_0105hyp_p *100 #turning proportions into percentages
jrnl_0105hyp_p100 <- addmargins(jrnl_0105hyp_p100 ,margin=2) #adding row margins
#P-values in the range (.01 - .05] and year
yr_0105hyp_t <- xtabs(~ Year+pval_01_05, data=Hyp_all_jrnl_exact_0105) #frequency table
yr_0105hyp_t <- addmargins(yr_0105hyp_t, margin=2) #adding row margins
yr_0105hyp_m <- as.matrix(yr_0105hyp_t)
yr_0105hyp_p <- with(Hyp_all_jrnl_exact_0105, table(Year, pval_01_05)) %>%
prop.table(margin = 1) #proportion table
yr_0105hyp_p100 <- yr_0105hyp_p *100 #turning proportions into percentages
yr_0105hyp_p100 <- addmargins(yr_0105hyp_p100 ,margin=2) #adding row margins
#Total of p-values in the range (.01 - .05]
tot_0105hyp_t <- table(Hyp_all_jrnl_exact_0105$pval_01_05) #frequency table
tot_0105hyp_sum <- sum(tot_0105hyp_t) #calculating the total frequency
tot_0105hyp_tp <- round(100*prop.table(tot_0105hyp_t),digits=3) #proportion table
tot_0105hyp_p <- addmargins(tot_0105hyp_tp) #adding row margin
#Frequencies
jrnl_bump_hyp <- cbind(jrnl_0305hyp_m, jrnl_0105hyp_m) #binding tables with data on journals
yr_bump_hyp <- cbind(yr_0305hyp_m, yr_0105hyp_m) #binding tables with data on years
tot_bump_hyp <- rbind(jrnl_bump_hyp, yr_bump_hyp, c(tot_0305hyp_t, tot_0305hyp_sum, tot_0105hyp_t, tot_0105hyp_sum)) #table
rownames(tot_bump_hyp)[7] <- "Total" #naming the 'total' row
tot_bump_hyp <- as.data.frame(tot_bump_hyp) #converting to data frame
names(tot_bump_hyp)[3] <- c("total") #changing column names
names(tot_bump_hyp)[6] <- c("total") #changing column names
#Percentages
jrnl_m_perc_hyp <- cbind(jrnl_0305hyp_p100, jrnl_0105hyp_p100) #binding tables with data on journals
yr_m_perc_hyp <- cbind(yr_0305hyp_p100, yr_0105hyp_p100) #binding tables with data on years
tot_bump_perc_hyp <- rbind(jrnl_m_perc_hyp, yr_m_perc_hyp, c(tot_0305hyp_p, tot_0105hyp_p)) #table
rownames(tot_bump_perc_hyp)[7] <- "Total" #naming the 'total' row
tot_bump_perc_hyp <- as.data.frame(tot_bump_perc_hyp) #converting to data frame
names(tot_bump_perc_hyp)[3] <- c("total") #changing column names
names(tot_bump_perc_hyp)[6] <- c("total") #changing column names
tot_bump_hyp %>%
kable(format = "html", align = "c", caption = "<b>Table 19. Bump in p-values (frequencies)<b>") %>% #format html, centered alignment, bold-faced caption
column_spec (4, border_left = F, border_right = T, extra_css = "border-right:2px solid lightgrey;")%>% #vertical, solid lightgrey line separates binwidths
kable_styling(bootstrap_options = "striped", full_width = F) #styling
tot_bump_perc_hyp %>%
kable(format = "html", align = "c", caption = "<b>Table 20. Bump in p-values (%)<b>", digits = 1) %>% #format html, centered alignment, bold-faced caption
column_spec (4, border_left = F, border_right = T, extra_css = "border-right:2px solid lightgrey;")%>% #vertical, solid lightgrey line separates binwidths
kable_styling(bootstrap_options = "striped", full_width = F) #styling
pb_bump_Hyp <- subset(Hyp_all_jrnl_exact, Reported.P.Value >= 0 & Reported.P.Value <= .1) #n = 514
pb_bump_Hyp <- pb_bump_Hyp[ ,c("Reported.P.Value")]
write.table(pb_bump_Hyp, "C:/Users/EliseSchramkowski/Documents/Master's thesis/Excel/pb_bump_Hyp.txt", sep = ",", eol = "\r")
plot_man_rep <- ggplot() +
geom_histogram(data = Hyp_all_jrnl_exact, aes(x = Reported.P.Value), fill = 'grey', colour='black', #10 bins of width .01, black bin lines of the bins are black, bins colored grey, bins close on the left
bins=10, binwidth = .01, boundary = 0, closed = "right") + #ticks on the x-axis with intervals of .01
scale_x_continuous(expand = c(0, 0), breaks = seq(0, .10, by = .01), lim = c(0,.105)) + #ticks on the x-axis in the range [0, 200] with intervals of 25
scale_y_continuous(breaks = seq(0,200, by = 5)) + #ticks on the y-axis in the range [0, 200]
labs(title = "n = 167", x = "*p*-value") +  #add title and label to the x-axis
theme_classic(base_size = 14) + #theme with x and y axis lines and no gridline
theme(plot.title = element_text(size = 10)) #adapt title size
txt_hyp_plot <- c("**Exactly reported *p*-values related to explicitly stated hypotheses in the range [0, .10]**") #title of the figure
txt_hyp_plot_out <- grid.arrange(plot_man_rep, ncol=1, nrow = 1,  top = richtext_grob(txt_hyp_plot,gp=gpar(fontsize=12,font=2)))
Hyp_marg <- subset(Hyp, Reported.P.Value > .05 & Reported.P.Value <= .1 & Reported.Comparison != 2 & Reported.Comparison != 5) #subsetting the data
nrow(Hyp_marg) #n = 130
#Marginal significance in journals
jrnl_marg_hyp_t <- xtabs(~ Journal+Marg.sig, data=Hyp_marg) #frequency table
jrnl_marg_hyp_t <- addmargins(jrnl_marg_hyp_t ,margin=2) #adding row margins
jrnl_marg_hyp_m <- as.matrix(jrnl_marg_hyp_t)
jrnl_marg_hyp_p <- with(Hyp_marg, table(Journal, Marg.sig)) %>%
prop.table(margin = 1) #proportion table
jrnl_marg_hyp_p100 <- jrnl_marg_hyp_p *100 #turning proportions into percentages
jrnl_marg_hyp_p100 <- addmargins(jrnl_marg_hyp_p100 ,margin=2) #adding row margins
#Marginal significance in years
yr_marg_hyp_t <- xtabs(~ Year+Marg.sig, data=Hyp_marg) #frequency table
yr_marg_hyp_t <- addmargins(yr_marg_hyp_t, margin=2) #adding row margins
yr_marg_hyp_m <- as.matrix(yr_marg_hyp_t)
yr_marg_hyp_p <- with(Hyp_marg, table(Year, Marg.sig)) %>%
prop.table(margin = 1) #proportion table
yr_marg_hyp_p100 <- yr_marg_hyp_p *100 #turning proportions into percentages
yr_marg_hyp_p100 <- addmargins(yr_marg_hyp_p100 ,margin=2) #adding row margins
#Total of marginally significant *p*-values
tot_marg_hyp_t <- table(Hyp_marg$Marg.sig) #frequency table
tot_marg_hyp_sum <- sum(tot_marg_hyp_t) #calculating the total frequency
tot_marg_hyp_tp <- round(100*prop.table(tot_marg_hyp_t),digits=3) #proportion table
tot_marg_hyp_p <- addmargins(tot_marg_hyp_tp) #adding row margin
#Frequencies
tot_marg_hyp <- rbind(jrnl_marg_hyp_m, yr_marg_hyp_m, c(tot_marg_hyp_t, tot_marg_hyp_sum)) #table
rownames(tot_marg_hyp)[7] <- "Total" #naming the 'total' row
tot_marg_hyp <- as.data.frame(tot_marg_hyp) #converting to data frame
names(tot_marg_hyp)[1:3] <- c("no", "yes", "total") #changing column names
#Percentages
perc_marg_hyp <- rbind(jrnl_marg_hyp_p100, yr_marg_hyp_p100, tot_marg_hyp_p) #table
rownames(perc_marg_hyp)[7] <- "Total" #naming the 'total' row
perc_marg_hyp <- as.data.frame(perc_marg_hyp) #converting to data frame
names(perc_marg_hyp)[1:3] <- c("no", "yes", "total") #changing column names
tot_marg_hyp %>%
kable(format = "html", align = "c", caption = "<b>Table 21. Marginal significance  (frequencies)<b>") %>% #format html, centered alignment, bold-faced caption
kable_styling(bootstrap_options = "striped", full_width = F, position = "float_left") #styling
perc_marg_hyp  %>%
kable(format = "html", align = "c", caption = "<b>Table 22. Marginal significance  (%)<b>", digits = 1) %>% #format html, centered alignment, bold-faced caption
kable_styling(bootstrap_options = "striped", full_width = F, position = "right") #styling
#Removing duplicates to count number of articles.
Pval_marg_hyp_nd <- Hyp_marg[!duplicated(Hyp_marg$Article_numb), ]
nrow(Pval_marg_hyp_nd) #n = 30 articles with relevant p-values
#Data set with all marginally significant results
AllP_marg_hyp1 <- subset(Hyp_marg, Marg.sig == 1)
nrow(AllP_marg_hyp1) #n = 106
#Data set with all articles with at least one marginally significant result
Pval_marg_hyp1_nd <- AllP_marg_hyp1[!duplicated(AllP_marg_hyp1$Article_numb), ]
nrow(Pval_marg_hyp1_nd) #n = 19
#Marginally significant p-values per journal
jrnl_marg_hyp_tot_nd <- as.matrix(table(Pval_marg_hyp_nd$Journal)) #>= 1 relevant p-value
jrnl_marg_hyp_1_nd <- as.matrix(table(Pval_marg_hyp1_nd$Journal)) #>= 1 reported as marginally significant
jrnl_marg_hyp_0_nd <- jrnl_marg_hyp_tot_nd - jrnl_marg_hyp_1_nd #0 reported as marginally significant
jrnl_marg_hyp_nd <- cbind(jrnl_marg_hyp_1_nd, jrnl_marg_hyp_0_nd, jrnl_marg_hyp_tot_nd) #combining matrices
colnames(jrnl_marg_hyp_nd) <- c("Yes", "No", "Total") #assigning column names
jrnl_marg_hyp_nd
jrnl_marg_hyp_nd_01 <- cbind(jrnl_marg_hyp_1_nd, jrnl_marg_hyp_0_nd) #binding the non-total objects
jrnl_marg_hyp_nd_p01<- prop.table(jrnl_marg_hyp_nd_01, margin = 1)*100 #table with percentages
jrnl_marg_hyp_nd_p100 <- addmargins(jrnl_marg_hyp_nd_p01 ,margin=2)#adding row margins
colnames(jrnl_marg_hyp_nd_p100) <- c("Yes", "No", "Total") #assigning column names
#Marginally significant p-values per year
yr_marg_hyp_tot_nd <- as.matrix(table(Pval_marg_hyp_nd$Year)) #>= 1 relevant p-value
yr_marg_hyp_1_nd <- as.matrix(table(Pval_marg_hyp1_nd$Year)) #>= 1 reported as marginally significant
yr_marg_hyp_0_nd <- yr_marg_hyp_tot_nd - yr_marg_hyp_1_nd #0 reported as marginally significant
yr_marg_hyp_nd <- cbind(yr_marg_hyp_1_nd, yr_marg_hyp_0_nd, yr_marg_hyp_tot_nd) #combining matrices
colnames(yr_marg_hyp_nd) <- c("Yes", "No", "Total") #assigning column names
yr_marg_hyp_nd
yr_marg_hyp_nd_01 <- cbind(yr_marg_hyp_1_nd, yr_marg_hyp_0_nd) #binding the non-total objects
yr_marg_hyp_nd_p01<- prop.table(yr_marg_hyp_nd_01, margin = 1)*100 #table with percentages
yr_marg_hyp_nd_p100 <- addmargins(yr_marg_hyp_nd_p01 ,margin=2)#adding row margins
colnames(yr_marg_hyp_nd_p100) <- c("Yes", "No", "Total") #assigning column names
#Total of marginally significant p-values
Pval_marg_hyp_nd_tot <- nrow(Pval_marg_hyp_nd) #>= 1 relevant p-value
Pval_marg_hyp_1_nd_nrow <- nrow(Pval_marg_hyp1_nd) #>= 1 reported as marginally significant
Pval_marg_hyp_0_nd_nrow <- Pval_marg_hyp_nd_tot - Pval_marg_hyp_1_nd_nrow #0 reported as marginally significant
tot_marg_hyp_nd <- as.matrix(cbind(Pval_marg_hyp_1_nd_nrow, Pval_marg_hyp_0_nd_nrow, Pval_marg_hyp_nd_tot)) #combining objects
colnames(tot_marg_hyp_nd) <- c("Yes", "No", "Total") #assigning column names
tot_marg_hyp_nd_01 <- cbind(Pval_marg_hyp_1_nd_nrow, Pval_marg_hyp_0_nd_nrow) #binding the non-total objects
tot_marg_hyp_nd_p01<- prop.table(tot_marg_hyp_nd_01, margin = 1)*100 #table with percentages
tot_marg_hyp_nd_p100 <- addmargins(tot_marg_hyp_nd_p01 ,margin=2)#adding row margins
colnames(tot_marg_hyp_nd_p100) <- c("Yes", "No", "Total") #assigning column names
#Frequencies
marg_hyp_nd <- rbind(jrnl_marg_hyp_nd, yr_marg_hyp_nd, tot_marg_hyp_nd) #table
rownames(marg_hyp_nd)[7] <- "Total"  #naming the 'total' row
marg_hyp_nd <- as.data.frame(marg_hyp_nd) #converting to data frame
names(marg_hyp_nd)[1:3] <- c("no", "yes", "total") #changing column names
#Percentages
perc_marg_hyp_nd <- rbind(jrnl_marg_hyp_nd_p100, yr_marg_hyp_nd_p100, tot_marg_hyp_nd_p100) #table
rownames(perc_marg_hyp_nd)[7] <- "Total" #naming the 'total' row
perc_marg_hyp_nd <- as.data.frame(perc_marg_hyp_nd) #converting to data frame
names(perc_marg_hyp_nd)[1:3] <- c("no", "yes", "total") #changing column names
marg_hyp_nd %>%
kable(format = "html", align = "c", caption = "<b>Table 23. At least one result reported as marginally significant (frequencies)<b>") %>% #format html, centered alignment, bold-faced caption
kable_styling(bootstrap_options = "striped", full_width = F, position = "float_left") #styling
perc_marg_hyp_nd  %>%
kable(format = "html", align = "c", caption = "<b>Table 24. At least one result reported as marginally significant   (%)<b>", digits = 1) %>% #format html, centered alignment, bold-faced caption
kable_styling(bootstrap_options = "striped", full_width = F, position = "right") #styling
?pt
Hyp <- read_excel("/Users/EliseSchramkowski/Documents/Master's thesis/Excel/Hyp.xlsx", col_types = c(
#Article_numb, Article, Author(s), Journal
"numeric", "text", "text", "text",
#Year, Issue, Number of hypotheses, Belongs to hypothesis
"numeric", "numeric", "numeric", "numeric",
#Statistic, b, se, s_stat
"text", "numeric", "numeric", "numeric",
#n, IVs, df_1,df_2
"numeric", "numeric",  "numeric", "numeric",
#Reported.Comparison, Reported.P.Value, lb_b, ub_b
"text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric",
#dec_pval_rep, Computed, P_one_sided_chi, Error
"numeric", "numeric", "numeric", "numeric",
#DecisionError, OneTailed, Marg.sig, Hypothesis
"numeric", "text", "numeric", "text",
#Information from text article used, Comment
"text", "text"))
nrow(Hyp) #n = 4929
#Assigning numbers to the types of statistics.
Hyp$Statistic[which(Hyp$Statistic=="NA")] <- "1"
Hyp$Statistic[which(Hyp$Statistic=="OR")] <- "1"
Hyp$Statistic[which(Hyp$Statistic=="IRR")] <- "1"
Hyp$Statistic[which(Hyp$Statistic=="PP")] <- "1"
Hyp$Statistic[which(Hyp$Statistic=="HZ")] <- "1"
Hyp$Statistic[which(Hyp$Statistic=="t/z")] <- "1"
Hyp$Statistic[which(Hyp$Statistic=="UNKNOWN")] <- "1"
Hyp$Statistic[which(Hyp$Statistic=="Wald")] <- "1"
Hyp$Statistic[which(Hyp$Statistic=="t")] <- "2"
Hyp$Statistic[which(Hyp$Statistic=="b&SE&t")] <- "2"
Hyp$Statistic[which(Hyp$Statistic=="b/SE=t")] <- "3"
Hyp$Statistic[which(Hyp$Statistic=="z")] <- "4"
Hyp$Statistic[which(Hyp$Statistic=="b&z")] <- "5"
Hyp$Statistic[which(Hyp$Statistic=="OR&z")] <- "6"
Hyp$Statistic[which(Hyp$Statistic=="chi_2")] <- "7"
Hyp$Statistic[which(Hyp$Statistic=="F")] <- "8"
Hyp$Statistic[which(Hyp$Statistic=="r")] <- "9"
#Assigning numbers to the categories of 'OneTailed'.
Hyp$OneTailed[which(Hyp$OneTailed == "TRUE")] <- "1"
Hyp$OneTailed[which(Hyp$OneTailed == "FALSE")] <- "2"
Hyp$OneTailed[which(Hyp$OneTailed == "UNKNOWN")] <- "0"
#Assigning numbers to the categories of 'Reported.Comparison'.
Hyp$Reported.Comparison[which(Hyp$Reported.Comparison == "<")] <- "1"
Hyp$Reported.Comparison[which(Hyp$Reported.Comparison == ">=")] <- "2"
Hyp$Reported.Comparison[which(Hyp$Reported.Comparison == "ns")] <- "3"
Hyp$Reported.Comparison[which(Hyp$Reported.Comparison == "=")] <- "4"
Hyp$Reported.Comparison[which(Hyp$Reported.Comparison == ">")] <- "5"
#Making '1E-3' and 'ns' numeric, such that 'Reported.P.Value' can be converted to a numeric variable properly.
Hyp$Reported.P.Value<- as.numeric(Hyp$Reported.P.Value)
Hyp$Reported.P.Value[which(Hyp$Reported.P.Value=="1E-3")] <- .001
Hyp$Reported.P.Value[which(Hyp$Reported.P.Value=="ns")] <- 1
#'Reported.P.Value' is now a numeric variable.
is.numeric(Hyp$Reported.P.Value)
is.numeric(Hyp$t_stat)
#Subset of all results with regression coefficients, t-statistics, z-values, F-values, and/or chi^2-values.
Hyp_i <- subset(Hyp, Statistic > 1 & Statistic <= 9)
nrow(Hyp_i) #n = 564
#Subset of all results with regression coefficients, t-statistics, or both.
Hyp_t <- subset(Hyp_i, Statistic >= 2 & Statistic <= 3)
nrow(Hyp_t) #n = 217
#Subset of results which contain regression coefficients and/or t-statistics for which df also reported. This is the final selection of results which contain regression coefficients, t-statistics (or both), since one cannot recalculate p-values of these statistics without knowing the df of the results.
Hyp_t_df <- subset(Hyp_t, !is.na(df_1))
nrow(Hyp_t_df) #n = 10
#Subset of all results with z-statistics.
Hyp_z <- subset(Hyp_i, Statistic >= 4 & Statistic <= 6)
nrow(Hyp_z) #n = 262
#Subset of all results with chi2-statistics.
Hyp_chi <- subset(Hyp_i, Statistic == 7 & !is.na(df_1) & !is.na(t_stat) & !is.na(OneTailed))
nrow(Hyp_chi) #n = 63
#Subset of all results with F-statistics.
Hyp_f <- subset(Hyp_i, Statistic == 8)
nrow(Hyp_f) #n = 16
#Subset of all results with r-statistics.
Hyp_r <- subset(Hyp_i, Statistic == 9)
nrow(Hyp_r) #n = 52
#Hyp_t_df$t_stat <- as.numeric(as.character(Hyp_t_df$t_stat)) #new column with numeric t-values
nrow_Hyp_t_df <- nrow(Hyp_t_df) #object for the number of columns
#Determining whether a p-value is one-sided or two-sided.
for (i in 1:nrow_Hyp_t_df){
{Hyp_t_df$Computed[i] <- (2*pt(-abs(Hyp_t_df$t_stat[i]), Hyp_t_df$df_1[i]))}}
options(scipen = 999)
#Subset of results with Reported.Comparison '<'.
Hyp_t_sml <- subset(Hyp_t_df, Reported.Comparison == 1)
nrow(Hyp_t_sml) #n = 3
#Error if Reported.P.Value >= Computed.
Hyp_t_sml <- Hyp_t_sml %>% mutate(Error = ifelse(Reported.P.Value >= Computed, 0, 1))
mean(as.numeric(Hyp_t_sml$Error)) #n = 0
#DecisionError if Reported.P.Value <= .05 and Computed > .05.
Hyp_t_sml <- Hyp_t_sml %>% mutate(DecisionError = ifelse(Reported.P.Value <= .05 & Computed > .05, 1, 0))
mean(as.numeric(Hyp_t_sml$DecisionError)) #n = 0
decimalplaces <- function(x) {
if (abs(x - round(x)) > .Machine$double.eps^0.5) {
nchar(strsplit(sub('0+$', '', as.character(x)), ".", fixed = TRUE)[[1]][[2]])
} else {
return(0)
}
}
#Subset results with exactly reported p-values.
Hyp_eq_t <- subset(Hyp_t_df, Reported.Comparison == 4)
nrow(Hyp_eq_t) #n = 7
nrow_Hyp_eq_t <- nrow(Hyp_eq_t) #object for the number of columns
#Calculating the p-values that correspond with the computed lower and upper bounds for the t-values.
for (i in 1:nrow_Hyp_eq_t){
Hyp_eq_t$Comp_lb[i] <- (2*pt(-abs(Hyp_eq_t$lb_stat[i]), Hyp_eq_t$df_1[i]))
Hyp_eq_t$dec_pval_rep[i] <- decimalplaces(Hyp_eq_t$Reported.P.Value[i])}
for (i in 1:nrow_Hyp_eq_t){
Hyp_eq_t$Comp_ub[i] <- (2*pt(-abs(Hyp_eq_t$ub_stat[i]), Hyp_eq_t$df_1[i]))}
#Rounded p-values of the lower and upper bounds of acceptable t-values.
for (i in 1:nrow_Hyp_eq_t){
Hyp_eq_t$Comp_lb_r[i] <- round(Hyp_eq_t$Comp_lb[i], digits = Hyp_eq_t$dec_pval_rep[i])}
for (i in 1:nrow_Hyp_eq_t){
Hyp_eq_t$Comp_ub_r[i] <- round(Hyp_eq_t$Comp_ub[i], digits = Hyp_eq_t$dec_pval_rep[i])}
#A p-value is smaller OR larger than the minimum or maximum p-value that would be allowed under correct rounding if it is smaller OR larger than BOTH p-values based on the 'lower and upper bound' t-values.
Hyp_eq_t <- Hyp_eq_t %>% mutate(Comp_below = ifelse(Reported.P.Value < Comp_ub_r & Reported.P.Value < Comp_lb_r, 1, 0))
Hyp_eq_t <- Hyp_eq_t %>% mutate(Comp_above = ifelse(Reported.P.Value > Comp_ub_r & Reported.P.Value > Comp_lb_r, 1, 0))
#Error if Reported.P.Value is not different from Computed due to correct rounding.
Hyp_eq_t <- Hyp_eq_t %>% mutate(Error = ifelse(Comp_below == 0 & Comp_above == 0, 0, 1))
#DecisionError if Reported.P.Value <= .05 and Computed > .05, or vice versa.
Hyp_eq_t <- Hyp_eq_t %>% mutate(DecisionError = ifelse((Reported.P.Value <= 0.05 & Computed > 0.05)|(Reported.P.Value > 0.05 & Computed <= 0.05), 1, 0))
nrow_Hyp_r <- nrow(Hyp_r) #object for the number of columns
#Determining whether a p-value is one-sided or two-sided.
for (i in 1:nrow_Hyp_r){
{Hyp_r$Computed[i] <- (2*pt(-abs(Hyp_r$t_stat[i]), Hyp_r$df_1[i]))}}
options(scipen = 999)
#Subset of results with Reported.Comparison '<'.
Hyp_r_sml <- subset(Hyp_r, Reported.Comparison == 1)
nrow(Hyp_r_sml) #n = 3
#Error if Reported.P.Value >= Computed.
Hyp_r_sml <- Hyp_r_sml %>% mutate(Error = ifelse(Reported.P.Value >= Computed, 0, 1))
mean(as.numeric(Hyp_r_sml$Error)) #n = 0
#DecisionError if Reported.P.Value <= .05 and Computed > .05.
Hyp_r_sml <- Hyp_r_sml %>% mutate(DecisionError = ifelse(Reported.P.Value <= .05 & Computed > .05, 1, 0))
mean(as.numeric(Hyp_r_sml$DecisionError)) #n = 0
View(Hyp_r_sml)
nrow_Hyp_r <- nrow(Hyp_r) #object for the number of columns
#Determining whether a p-value is one-sided or two-sided.
for (i in 1:nrow_Hyp_r){
{Hyp_r$Computed[i] <- (2*pt(-abs(Hyp_r$t_stat[i]), Hyp_r$df_1[i]))}}
options(scipen = 999)
#Subset of results with Reported.Comparison '<'.
Hyp_r_sml <- subset(Hyp_r, Reported.Comparison == 1)
nrow(Hyp_r_sml) #n = 32
#Error if Reported.P.Value >= Computed.
Hyp_r_sml <- Hyp_r_sml %>% mutate(Error = ifelse(Reported.P.Value >= Computed, 0, 1))
mean(as.numeric(Hyp_r_sml$Error)) #n = 0
#DecisionError if Reported.P.Value <= .05 and Computed > .05.
Hyp_r_sml <- Hyp_r_sml %>% mutate(DecisionError = ifelse(Reported.P.Value <= .05 & Computed > .05, 1, 0))
mean(as.numeric(Hyp_r_sml$DecisionError)) #n = 0
#General
library('readxl') #reading in .xlsx files
library('car') #logistic regressions
library('knitr') #creating nice tables
library('kableExtra') #creating nice tables
library('dplyr') #using pipes
#Plots
#library('ggplot2') #creating plots
library('gridExtra') #arranging tables
library('ggtext') #adapting title size plot
library('gridtext') #adapting text above figure containing multiple plots
library('grid') #font (size) options in grid.arrange function
library("cowplot") #adding a label to the final containing multiple plots
library("ggpubr") #putting together ggplots
nrow_Hyp_r <- nrow(Hyp_r) #object for the number of columns
#Determining whether a p-value is one-sided or two-sided.
for (i in 1:nrow_Hyp_r){
{Hyp_r$Computed[i] <- (2*pt(-abs(Hyp_r$t_stat[i]), Hyp_r$df_1[i]))}}
options(scipen = 999)
#Subset of results with Reported.Comparison '<'.
Hyp_r_sml <- subset(Hyp_r, Reported.Comparison == 1)
nrow(Hyp_r_sml) #n = 32
#Error if Reported.P.Value >= Computed.
Hyp_r_sml <- Hyp_r_sml %>% mutate(Error = ifelse(Reported.P.Value >= Computed, 0, 1))
mean(as.numeric(Hyp_r_sml$Error)) #n = 0
#DecisionError if Reported.P.Value <= .05 and Computed > .05.
Hyp_r_sml <- Hyp_r_sml %>% mutate(DecisionError = ifelse(Reported.P.Value <= .05 & Computed > .05, 1, 0))
mean(as.numeric(Hyp_r_sml$DecisionError)) #n = 0
View(Hyp_r_sml)
nrow_Hyp_r <- nrow(Hyp_r) #object for the number of columns
#Determining whether a p-value is one-sided or two-sided.
for (i in 1:nrow_Hyp_r){
{Hyp_r$Computed[i] <- (2*pt(-abs(Hyp_r$t_stat[i]), Hyp_r$df_1[i]))}}
options(scipen = 999)
#Subset of results with Reported.Comparison '<'.
Hyp_r_sml <- subset(Hyp_r, Reported.Comparison == 1)
nrow(Hyp_r_sml) #n = 32
#Error if Reported.P.Value >= Computed.
Hyp_r_sml <- Hyp_r_sml %>% mutate(Error = ifelse(Reported.P.Value >= Computed, 0, 1))
mean(as.numeric(Hyp_r_sml$Error)) #n = 0
#DecisionError if Reported.P.Value <= .05 and Computed > .05.
Hyp_r_sml <- Hyp_r_sml %>% mutate(DecisionError = ifelse(Reported.P.Value <= .05 & Computed > .05, 1, 0))
mean(as.numeric(Hyp_r_sml$DecisionError)) #n = 0
View(Hyp_r_sml)
Hyp <- read_excel("/Users/EliseSchramkowski/Documents/Master's thesis/Excel/Hyp.xlsx", col_types = c(
#Article_numb, Article, Author(s), Journal
"numeric", "text", "text", "text",
#Year, Issue, Number of hypotheses, Belongs to hypothesis
"numeric", "numeric", "numeric", "numeric",
#Statistic, b, se, s_stat
"text", "numeric", "numeric", "numeric",
#n, IVs, df_1,df_2
"numeric", "numeric",  "numeric", "numeric",
#Reported.Comparison, Reported.P.Value, lb_b, ub_b
"text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric",
#dec_pval_rep, Computed, P_one_sided_chi, Error
"numeric", "numeric", "numeric", "numeric",
#DecisionError, OneTailed, Marg.sig, Hypothesis
"numeric", "text", "numeric", "text",
#Information from text article used, Comment
"text", "text"))
nrow(Hyp) #n = 4929
#Assigning numbers to the types of statistics.
Hyp$Statistic[which(Hyp$Statistic=="NA")] <- "1"
Hyp$Statistic[which(Hyp$Statistic=="OR")] <- "1"
Hyp$Statistic[which(Hyp$Statistic=="IRR")] <- "1"
Hyp$Statistic[which(Hyp$Statistic=="PP")] <- "1"
Hyp$Statistic[which(Hyp$Statistic=="HZ")] <- "1"
Hyp$Statistic[which(Hyp$Statistic=="t/z")] <- "1"
Hyp$Statistic[which(Hyp$Statistic=="UNKNOWN")] <- "1"
Hyp$Statistic[which(Hyp$Statistic=="Wald")] <- "1"
Hyp$Statistic[which(Hyp$Statistic=="t")] <- "2"
Hyp$Statistic[which(Hyp$Statistic=="b&SE&t")] <- "2"
Hyp$Statistic[which(Hyp$Statistic=="b/SE=t")] <- "3"
Hyp$Statistic[which(Hyp$Statistic=="z")] <- "4"
Hyp$Statistic[which(Hyp$Statistic=="b&z")] <- "5"
Hyp$Statistic[which(Hyp$Statistic=="OR&z")] <- "6"
Hyp$Statistic[which(Hyp$Statistic=="chi_2")] <- "7"
Hyp$Statistic[which(Hyp$Statistic=="F")] <- "8"
Hyp$Statistic[which(Hyp$Statistic=="r")] <- "9"
#Assigning numbers to the categories of 'OneTailed'.
Hyp$OneTailed[which(Hyp$OneTailed == "TRUE")] <- "1"
Hyp$OneTailed[which(Hyp$OneTailed == "FALSE")] <- "2"
Hyp$OneTailed[which(Hyp$OneTailed == "UNKNOWN")] <- "0"
#Assigning numbers to the categories of 'Reported.Comparison'.
Hyp$Reported.Comparison[which(Hyp$Reported.Comparison == "<")] <- "1"
Hyp$Reported.Comparison[which(Hyp$Reported.Comparison == ">=")] <- "2"
Hyp$Reported.Comparison[which(Hyp$Reported.Comparison == "ns")] <- "3"
Hyp$Reported.Comparison[which(Hyp$Reported.Comparison == "=")] <- "4"
Hyp$Reported.Comparison[which(Hyp$Reported.Comparison == ">")] <- "5"
#Making '1E-3' and 'ns' numeric, such that 'Reported.P.Value' can be converted to a numeric variable properly.
Hyp$Reported.P.Value<- as.numeric(Hyp$Reported.P.Value)
Hyp$Reported.P.Value[which(Hyp$Reported.P.Value=="1E-3")] <- .001
Hyp$Reported.P.Value[which(Hyp$Reported.P.Value=="ns")] <- 1
#'Reported.P.Value' is now a numeric variable.
is.numeric(Hyp$Reported.P.Value)
is.numeric(Hyp$t_stat)
#Subset of all results with regression coefficients, t-statistics, z-values, F-values, and/or chi^2-values.
Hyp_i <- subset(Hyp, Statistic > 1 & Statistic <= 9)
nrow(Hyp_i) #n = 564
#Subset of all results with regression coefficients, t-statistics, or both.
Hyp_t <- subset(Hyp_i, Statistic >= 2 & Statistic <= 3)
nrow(Hyp_t) #n = 217
#Subset of results which contain regression coefficients and/or t-statistics for which df also reported. This is the final selection of results which contain regression coefficients, t-statistics (or both), since one cannot recalculate p-values of these statistics without knowing the df of the results.
Hyp_t_df <- subset(Hyp_t, !is.na(df_1))
nrow(Hyp_t_df) #n = 10
#Subset of all results with z-statistics.
Hyp_z <- subset(Hyp_i, Statistic >= 4 & Statistic <= 6)
nrow(Hyp_z) #n = 262
#Subset of all results with chi2-statistics.
Hyp_chi <- subset(Hyp_i, Statistic == 7 & !is.na(df_1) & !is.na(t_stat) & !is.na(OneTailed))
nrow(Hyp_chi) #n = 63
#Subset of all results with F-statistics.
Hyp_f <- subset(Hyp_i, Statistic == 8)
nrow(Hyp_f) #n = 16
#Subset of all results with r-statistics.
Hyp_r <- subset(Hyp_i, Statistic == 9)
nrow(Hyp_r) #n = 52
nrow_Hyp_r <- nrow(Hyp_r) #object for the number of columns
#Determining whether a p-value is one-sided or two-sided.
for (i in 1:nrow_Hyp_r){
{Hyp_r$Computed[i] <- (2*pt(-abs(Hyp_r$t_stat[i]), Hyp_r$df_1[i]))}}
options(scipen = 999)
#Subset of results with Reported.Comparison '<'.
Hyp_r_sml <- subset(Hyp_r, Reported.Comparison == 1)
nrow(Hyp_r_sml) #n = 32
#Error if Reported.P.Value >= Computed.
Hyp_r_sml <- Hyp_r_sml %>% mutate(Error = ifelse(Reported.P.Value >= Computed, 0, 1))
mean(as.numeric(Hyp_r_sml$Error)) #n = 0
#DecisionError if Reported.P.Value <= .05 and Computed > .05.
Hyp_r_sml <- Hyp_r_sml %>% mutate(DecisionError = ifelse(Reported.P.Value <= .05 & Computed > .05, 1, 0))
mean(as.numeric(Hyp_r_sml$DecisionError)) #n = 0
View(Hyp_r_sml)
?phyper
