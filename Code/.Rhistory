#Determining whether a p-value is one-sided or two-sided.
for (i in 1:nrow_Hyp_r){
{Hyp_r$Computed[i] <- (2*pt(-abs(Hyp_r$t_stat[i]), Hyp_r$df_1[i]))}}
options(scipen = 999)
#Subset of results with Reported.Comparison '<'.
Hyp_r_sml <- subset(Hyp_r, Reported.Comparison == 1)
nrow(Hyp_r_sml) #n = 32
#Error if Reported.P.Value >= Computed.
Hyp_r_sml <- Hyp_r_sml %>% mutate(Error = ifelse(Reported.P.Value >= Computed, 0, 1))
mean(as.numeric(Hyp_r_sml$Error)) #n = 0
#DecisionError if Reported.P.Value <= .05 and Computed > .05.
Hyp_r_sml <- Hyp_r_sml %>% mutate(DecisionError = ifelse(Reported.P.Value <= .05 & Computed > .05, 1, 0))
mean(as.numeric(Hyp_r_sml$DecisionError)) #n = 0
View(Hyp_r_sml)
Hyp <- read_excel("/Users/EliseSchramkowski/Documents/Master's thesis/Excel/Hyp.xlsx", col_types = c(
#Article_numb, Article, Author(s), Journal
"numeric", "text", "text", "text",
#Year, Issue, Number of hypotheses, Belongs to hypothesis
"numeric", "numeric", "numeric", "numeric",
#Statistic, b, se, s_stat
"text", "numeric", "numeric", "numeric",
#n, IVs, df_1,df_2
"numeric", "numeric",  "numeric", "numeric",
#Reported.Comparison, Reported.P.Value, lb_b, ub_b
"text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric",
#dec_pval_rep, Computed, P_one_sided_chi, Error
"numeric", "numeric", "numeric", "numeric",
#DecisionError, OneTailed, Marg.sig, Hypothesis
"numeric", "text", "numeric", "text",
#Information from text article used, Comment
"text", "text"))
nrow(Hyp) #n = 4929
#Assigning numbers to the types of statistics.
Hyp$Statistic[which(Hyp$Statistic=="NA")] <- "1"
Hyp$Statistic[which(Hyp$Statistic=="OR")] <- "1"
Hyp$Statistic[which(Hyp$Statistic=="IRR")] <- "1"
Hyp$Statistic[which(Hyp$Statistic=="PP")] <- "1"
Hyp$Statistic[which(Hyp$Statistic=="HZ")] <- "1"
Hyp$Statistic[which(Hyp$Statistic=="t/z")] <- "1"
Hyp$Statistic[which(Hyp$Statistic=="UNKNOWN")] <- "1"
Hyp$Statistic[which(Hyp$Statistic=="Wald")] <- "1"
Hyp$Statistic[which(Hyp$Statistic=="t")] <- "2"
Hyp$Statistic[which(Hyp$Statistic=="b&SE&t")] <- "2"
Hyp$Statistic[which(Hyp$Statistic=="b/SE=t")] <- "3"
Hyp$Statistic[which(Hyp$Statistic=="z")] <- "4"
Hyp$Statistic[which(Hyp$Statistic=="b&z")] <- "5"
Hyp$Statistic[which(Hyp$Statistic=="OR&z")] <- "6"
Hyp$Statistic[which(Hyp$Statistic=="chi_2")] <- "7"
Hyp$Statistic[which(Hyp$Statistic=="F")] <- "8"
Hyp$Statistic[which(Hyp$Statistic=="r")] <- "9"
#Assigning numbers to the categories of 'OneTailed'.
Hyp$OneTailed[which(Hyp$OneTailed == "TRUE")] <- "1"
Hyp$OneTailed[which(Hyp$OneTailed == "FALSE")] <- "2"
Hyp$OneTailed[which(Hyp$OneTailed == "UNKNOWN")] <- "0"
#Assigning numbers to the categories of 'Reported.Comparison'.
Hyp$Reported.Comparison[which(Hyp$Reported.Comparison == "<")] <- "1"
Hyp$Reported.Comparison[which(Hyp$Reported.Comparison == ">=")] <- "2"
Hyp$Reported.Comparison[which(Hyp$Reported.Comparison == "ns")] <- "3"
Hyp$Reported.Comparison[which(Hyp$Reported.Comparison == "=")] <- "4"
Hyp$Reported.Comparison[which(Hyp$Reported.Comparison == ">")] <- "5"
#Making '1E-3' and 'ns' numeric, such that 'Reported.P.Value' can be converted to a numeric variable properly.
Hyp$Reported.P.Value<- as.numeric(Hyp$Reported.P.Value)
Hyp$Reported.P.Value[which(Hyp$Reported.P.Value=="1E-3")] <- .001
Hyp$Reported.P.Value[which(Hyp$Reported.P.Value=="ns")] <- 1
#'Reported.P.Value' is now a numeric variable.
is.numeric(Hyp$Reported.P.Value)
is.numeric(Hyp$t_stat)
#Subset of all results with regression coefficients, t-statistics, z-values, F-values, and/or chi^2-values.
Hyp_i <- subset(Hyp, Statistic > 1 & Statistic <= 9)
nrow(Hyp_i) #n = 564
#Subset of all results with regression coefficients, t-statistics, or both.
Hyp_t <- subset(Hyp_i, Statistic >= 2 & Statistic <= 3)
nrow(Hyp_t) #n = 217
#Subset of results which contain regression coefficients and/or t-statistics for which df also reported. This is the final selection of results which contain regression coefficients, t-statistics (or both), since one cannot recalculate p-values of these statistics without knowing the df of the results.
Hyp_t_df <- subset(Hyp_t, !is.na(df_1))
nrow(Hyp_t_df) #n = 10
#Subset of all results with z-statistics.
Hyp_z <- subset(Hyp_i, Statistic >= 4 & Statistic <= 6)
nrow(Hyp_z) #n = 262
#Subset of all results with chi2-statistics.
Hyp_chi <- subset(Hyp_i, Statistic == 7 & !is.na(df_1) & !is.na(t_stat) & !is.na(OneTailed))
nrow(Hyp_chi) #n = 63
#Subset of all results with F-statistics.
Hyp_f <- subset(Hyp_i, Statistic == 8)
nrow(Hyp_f) #n = 16
#Subset of all results with r-statistics.
Hyp_r <- subset(Hyp_i, Statistic == 9)
nrow(Hyp_r) #n = 52
nrow_Hyp_r <- nrow(Hyp_r) #object for the number of columns
#Determining whether a p-value is one-sided or two-sided.
for (i in 1:nrow_Hyp_r){
{Hyp_r$Computed[i] <- (2*pt(-abs(Hyp_r$t_stat[i]), Hyp_r$df_1[i]))}}
options(scipen = 999)
#Subset of results with Reported.Comparison '<'.
Hyp_r_sml <- subset(Hyp_r, Reported.Comparison == 1)
nrow(Hyp_r_sml) #n = 32
#Error if Reported.P.Value >= Computed.
Hyp_r_sml <- Hyp_r_sml %>% mutate(Error = ifelse(Reported.P.Value >= Computed, 0, 1))
mean(as.numeric(Hyp_r_sml$Error)) #n = 0
#DecisionError if Reported.P.Value <= .05 and Computed > .05.
Hyp_r_sml <- Hyp_r_sml %>% mutate(DecisionError = ifelse(Reported.P.Value <= .05 & Computed > .05, 1, 0))
mean(as.numeric(Hyp_r_sml$DecisionError)) #n = 0
View(Hyp_r_sml)
?phyper
knitr::opts_chunk$set(echo = TRUE)
#Setting working directory
setwd("C:/Users/EliseSchramkowski/Documents/GitHub/thesis")
getwd()
setwd("./Data")
getwd()
APA <- read_excel("./APA/APA.xlsx") # loading the data set
library('readxl') #reading in .xlsx files
library('car') #logistic regressions
library('knitr') #creating nice tables
library('kableExtra') #creating nice tables
library('dplyr') #using pipes
#Plots
#library('ggplot2') #creating plots
library('gridExtra') #arranging tables
library('ggtext') #adapting title size plot
library('gridtext') #adapting text above figure containing multiple plots
library('grid') #font (size) options in grid.arrange function
library("cowplot") #adding a label to the final containing multiple plots
library("ggpubr") #putting together ggplots
#Setting working directory
setwd("C:/Users/EliseSchramkowski/Documents/GitHub/thesis")
getwd()
setwd("./Data")
getwd()
APA <- read_excel("./APA/APA.xlsx") # loading the data set
nrow(APA) #n = 524
APA_u <- APA[!duplicated(APA$Article_numb), ] #removing duplicates to obtain the number of articles
nrow(APA_u) #n = 80
options(scipen = 999)
#Changing values assigned to variables in the data file.
APA$Error[APA$Error == "TRUE"] <- 1 #assigning '1' to inconsistent reported results
APA$Error[APA$Error == "FALSE"] <- 0 #assigning '0' to consistent reported results
APA$DecisionError[APA$DecisionError == "TRUE"] <- 1 #assigning '1' to grossly inconsistent reported results
APA$DecisionError[APA$DecisionError == "FALSE"] <- 0 #assigning '0' to reported results which are not grossly inconsistent
#Assigning numbers to the different categories of the variable 'Reported.Comparison'.
APA$Reported.Comparison[which(APA$Reported.Comparison == "=")] <- 4
APA$Reported.Comparison[which(APA$Reported.Comparison == "<")] <- 1
APA$Reported.Comparison[which(APA$Reported.Comparison == ">")] <- 5
APA$Reported.Comparison[which(APA$Reported.Comparison == "ns")] <- 3
APA <- subset(APA, Result.Hypothesis >= 0 & Result.Hypothesis <= 1) #subset all relevant results
nrow(APA) #n = 505
#Assigning labels to the different categories of 'Result.Hypothesis'.
APA$Result.Hypothesis[which(APA$Result.Hypothesis == 0)] <- "Result not related to hypothesis"
APA$Result.Hypothesis[which(APA$Result.Hypothesis == 1)] <- "Result related to hypothesis"
APA_nd <- APA[!duplicated(APA$Article_numb), ]  #removing duplicates to obtain number of articles
nrow(APA_nd) #n = 76
APA$Comp_n <- as.numeric(APA$Computed) #converting recalculated p-values to numeric values
#Setting working directory
setwd("C:/Users/EliseSchramkowski/Documents/GitHub/thesis")
getwd()
setwd("./Data")
getwd()
#Reading in 'AllP'
AllP <- read_excel("./AllP/AllP.xlsx", col_types = c(
#Article_numb, Article, Author(s), Journal
"numeric", "text", "text", "text",
#Year, Statistic, Reported.Comparison, Reported.P.Value
"numeric", "text", "text", "numeric",
#Raw, Result.Table, Reported.Not.Relevant, Not.Reported
"text", "numeric", "numeric", "numeric",
#Model.fit, Result.Hypothesis, Marg.Sig, Phrase in which mentioned
"numeric", "numeric", "numeric", "text",
#explicitly stated hypothesis, Comments
"text", "text"))
AllP <- subset(AllP, Article_numb >= 0) #only taking into account results with an article number (others are blank rows)
AllP_nd <- AllP[!duplicated(AllP$Article_numb), ] #calculating number of articles
nrow(AllP_nd) #there are 471 articles in the data set
setwd("C:/Users/EliseSchramkowski/Documents/GitHub/thesis")
getwd()
setwd("./Data")
getwd()
Hyp <- read_excel("./Hyp & inclusion_Hyp/Hyp.xlsx", col_types = c(
#Article_numb, Article, Author(s), Journal
"numeric", "text", "text", "text",
#Year, Issue, Number of hypotheses, Belongs to hypothesis
"numeric", "numeric", "numeric", "numeric",
#Statistic, b, se, s_stat
"text", "numeric", "numeric", "numeric",
#n, IVs, df_1,df_2
"numeric", "numeric",  "numeric", "numeric",
#Reported.Comparison, Reported.P.Value, lb_b, ub_b
"text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric",
#dec_pval_rep, Computed, P_one_sided_chi, Error
"numeric", "numeric", "numeric", "numeric",
#DecisionError, OneTailed, Marg.sig, Hypothesis
"numeric", "text", "numeric", "text",
#Information from text article used, Comment
"text", "text"))
nrow(Hyp) #n = 4929
setwd("C:/Users/EliseSchramkowski/Documents/GitHub/thesis")
getwd()
setwd("./Data")
getwd()
Hyp <- read_excel("./Hyp & inclusion_Hyp/Hyp.xlsx", col_types = c(
#Article_numb, Article, Author(s), Journal
"numeric", "text", "text", "text",
#Year, Issue, Number of hypotheses, Belongs to hypothesis
"numeric", "numeric", "numeric", "numeric",
#Statistic, b, se, s_stat
"text", "numeric", "numeric", "numeric",
#n, IVs, df_1,df_2
"numeric", "numeric",  "numeric", "numeric",
#Reported.Comparison, Reported.P.Value, lb_b, ub_b
"text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric",
#dec_pval_rep, Computed, P_one_sided_chi, Error
"numeric", "numeric", "numeric", "numeric",
#DecisionError, OneTailed, Marg.sig, Hypothesis
"numeric", "text", "numeric", "text",
#Information from text article used, Comment
"text", "text"))
nrow(Hyp) #n = 4929
setwd("C:/Users/EliseSchramkowski/Documents/GitHub/thesis")
getwd()
setwd("./Data")
getwd()
#Calling the data set with information on all articles.
Hyp_art <- read_excel("./inclusion_Hyp.xlsx", col_types = c(
#Article, Author(s), Journal, Year
"text", "text", "text", "numeric",
#Issue, Hypotheses, Req_stat,
"numeric", "numeric", "numeric",
#Selected, Number, Comments
"numeric", "numeric", "text"))
setwd("C:/Users/EliseSchramkowski/Documents/GitHub/thesis")
getwd()
setwd("./Data")
getwd()
#Calling the data set with information on all articles.
Hyp_art <- read_excel("./Hyp & inclusion_Hyp/inclusion_Hyp.xlsx", col_types = c(
#Article, Author(s), Journal, Year
"text", "text", "text", "numeric",
#Issue, Hypotheses, Req_stat,
"numeric", "numeric", "numeric",
#Selected, Number, Comments
"numeric", "numeric", "text"))
setwd("C:/Users/EliseSchramkowski/Documents/GitHub/thesis")
getwd()
setwd("./Data")
getwd()
#Calling the data set with information on all articles.
Hyp_art <- read_excel("./Hyp & inclusion_Hyp/inclusion_Hyp.xlsx", col_types = c(
#Article, Author(s), Journal, Year
"text", "text", "text", "numeric",
#Issue, Hypotheses, Req_stat,
"numeric", "numeric", "numeric",
#Selected, Number, Comments
"numeric", "numeric", "text"))
setwd("C:/Users/EliseSchramkowski/Documents/GitHub/thesis")
getwd()
setwd("./Data")
getwd()
#Calling the data set with information on all articles.
Hyp_art <- read_excel("./Hyp & inclusion_Hyp/inclusion_Hyp.xlsx", col_types = c(
#Article, Author(s), Journal, Year
"text", "text", "text", "numeric",
#Issue, Hypotheses, Req_stat,
"numeric", "numeric", "numeric",
#Selected, Number, Comments
"numeric", "numeric", "text"))
setwd("C:/Users/EliseSchramkowski/Documents/GitHub/thesis")
getwd()
setwd("./Data")
getwd()
#Calling the data set with information on all articles.
Hyp_art <- read_excel("./Hyp & inclusion_Hyp/inclusion_Hyp.xlsx", col_types = c(
#Article, Author(s), Journal, Year
"text", "text", "text", "numeric",
#Issue, Hypotheses, Req_stat,
"numeric", "numeric", "numeric",
#Selected, Number, Comments
"numeric", "numeric", "text"))
Hyp_art <- subset(Hyp_art, Year > 2013 & Year < 2017) #removing blank rows
nrow(Hyp_art) #n = 322
Hyp_art_journal <- table(Hyp_art$Journal) #all articles split up by journal
Hyp_art_journal
#Numbers of articles with listed hypotheses
Hyp_art_hyp1 <- subset(Hyp_art, Hypotheses == 1) #all articles with listed hypotheses
nrow(Hyp_art_hyp1) #n = 99
Hyp_art_hyp1_journal <- table(Hyp_art_hyp1$Journal) #articles split by journal
Hyp_art_hyp1_journal
#Numbers of articles with listed hypotheses and at least one required statistic
Hyp_art_hyp1_stat <- subset(Hyp_art_hyp1, Req_stat == 1) #all articles with >= 1 required statistic
nrow(Hyp_art_hyp1_stat) #n = 91
Hyp_art_hyp1_stat_journal <- table(Hyp_art_hyp1_stat$Journal) #articles split by journal
Hyp_art_hyp1_stat_journal
getwd()
setwd("C:/Users/EliseSchramkowski/Documents/GitHub/thesis")
getwd()
setwd("./Data")
getwd()
#Calling the data set with information on all articles.
Hyp_art <- read_excel("./Hyp & inclusion_Hyp/inclusion_Hyp.xlsx", col_types = c(
#Article, Author(s), Journal, Year
"text", "text", "text", "numeric",
#Issue, Hypotheses, Req_stat,
"numeric", "numeric", "numeric",
#Selected, Number, Comments
"numeric", "numeric", "text"))
Hyp_art <- subset(Hyp_art, Year > 2013 & Year < 2017) #removing blank rows
nrow(Hyp_art) #n = 322
Hyp_art_journal <- table(Hyp_art$Journal) #all articles split up by journal
Hyp_art_journal
#Numbers of articles with listed hypotheses
Hyp_art_hyp1 <- subset(Hyp_art, Hypotheses == 1) #all articles with listed hypotheses
nrow(Hyp_art_hyp1) #n = 99
Hyp_art_hyp1_journal <- table(Hyp_art_hyp1$Journal) #articles split by journal
Hyp_art_hyp1_journal
#Numbers of articles with listed hypotheses and at least one required statistic
Hyp_art_hyp1_stat <- subset(Hyp_art_hyp1, Req_stat == 1) #all articles with >= 1 required statistic
nrow(Hyp_art_hyp1_stat) #n = 91
Hyp_art_hyp1_stat_journal <- table(Hyp_art_hyp1_stat$Journal) #articles split by journal
Hyp_art_hyp1_stat_journal
setwd("C:/Users/EliseSchramkowski/Documents/GitHub/thesis/Data")
getwd()
#setwd("./Data")
#getwd()
#Calling the data set with information on all articles.
Hyp_art <- read_excel("./Hyp & inclusion_Hyp/inclusion_Hyp.xlsx", col_types = c(
#Article, Author(s), Journal, Year
"text", "text", "text", "numeric",
#Issue, Hypotheses, Req_stat,
"numeric", "numeric", "numeric",
#Selected, Number, Comments
"numeric", "numeric", "text"))
Hyp_art <- subset(Hyp_art, Year > 2013 & Year < 2017) #removing blank rows
nrow(Hyp_art) #n = 322
Hyp_art_journal <- table(Hyp_art$Journal) #all articles split up by journal
Hyp_art_journal
#Numbers of articles with listed hypotheses
Hyp_art_hyp1 <- subset(Hyp_art, Hypotheses == 1) #all articles with listed hypotheses
nrow(Hyp_art_hyp1) #n = 99
Hyp_art_hyp1_journal <- table(Hyp_art_hyp1$Journal) #articles split by journal
Hyp_art_hyp1_journal
#Numbers of articles with listed hypotheses and at least one required statistic
Hyp_art_hyp1_stat <- subset(Hyp_art_hyp1, Req_stat == 1) #all articles with >= 1 required statistic
nrow(Hyp_art_hyp1_stat) #n = 91
Hyp_art_hyp1_stat_journal <- table(Hyp_art_hyp1_stat$Journal) #articles split by journal
Hyp_art_hyp1_stat_journal
setwd("C:/Users/EliseSchramkowski/Documents/GitHub/thesis/Data")
getwd()
Hyp <- read_excel("./Hyp & inclusion_Hyp/Hyp.xlsx", col_types = c(
#Article_numb, Article, Author(s), Journal
"numeric", "text", "text", "text",
#Year, Issue, Number of hypotheses, Belongs to hypothesis
"numeric", "numeric", "numeric", "numeric",
#Statistic, b, se, s_stat
"text", "numeric", "numeric", "numeric",
#n, IVs, df_1,df_2
"numeric", "numeric",  "numeric", "numeric",
#Reported.Comparison, Reported.P.Value, lb_b, ub_b
"text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric",
#dec_pval_rep, Computed, P_one_sided_chi, Error
"numeric", "numeric", "numeric", "numeric",
#DecisionError, OneTailed, Marg.sig, Hypothesis
"numeric", "text", "numeric", "text",
#Information from text article used, Comment
"text", "text"))
nrow(Hyp) #n = 4929
#Setting working directory
setwd("..")
getwd()
APA <- read_excel("./APA/APA.xlsx") # loading the data set
#Setting working directory
setwd("C:/Users/EliseSchramkowski/Documents/GitHub/thesis/Data")
getwd()
APA <- read_excel("./APA/APA.xlsx") # loading the data set
nrow(APA) #n = 524
APA_u <- APA[!duplicated(APA$Article_numb), ] #removing duplicates to obtain the number of articles
nrow(APA_u) #n = 80
options(scipen = 999)
#Changing values assigned to variables in the data file.
APA$Error[APA$Error == "TRUE"] <- 1 #assigning '1' to inconsistent reported results
APA$Error[APA$Error == "FALSE"] <- 0 #assigning '0' to consistent reported results
APA$DecisionError[APA$DecisionError == "TRUE"] <- 1 #assigning '1' to grossly inconsistent reported results
APA$DecisionError[APA$DecisionError == "FALSE"] <- 0 #assigning '0' to reported results which are not grossly inconsistent
#Assigning numbers to the different categories of the variable 'Reported.Comparison'.
APA$Reported.Comparison[which(APA$Reported.Comparison == "=")] <- 4
APA$Reported.Comparison[which(APA$Reported.Comparison == "<")] <- 1
APA$Reported.Comparison[which(APA$Reported.Comparison == ">")] <- 5
APA$Reported.Comparison[which(APA$Reported.Comparison == "ns")] <- 3
APA <- subset(APA, Result.Hypothesis >= 0 & Result.Hypothesis <= 1) #subset all relevant results
nrow(APA) #n = 505
#Assigning labels to the different categories of 'Result.Hypothesis'.
APA$Result.Hypothesis[which(APA$Result.Hypothesis == 0)] <- "Result not related to hypothesis"
APA$Result.Hypothesis[which(APA$Result.Hypothesis == 1)] <- "Result related to hypothesis"
APA_nd <- APA[!duplicated(APA$Article_numb), ]  #removing duplicates to obtain number of articles
nrow(APA_nd) #n = 76
APA$Comp_n <- as.numeric(APA$Computed) #converting recalculated p-values to numeric values
#Setting working directory
setwd("..")
setwd("./Data")
getwd()
APA <- read_excel("./APA/APA.xlsx") # loading the data set
nrow(APA) #n = 524
APA_u <- APA[!duplicated(APA$Article_numb), ] #removing duplicates to obtain the number of articles
nrow(APA_u) #n = 80
options(scipen = 999)
#Changing values assigned to variables in the data file.
APA$Error[APA$Error == "TRUE"] <- 1 #assigning '1' to inconsistent reported results
APA$Error[APA$Error == "FALSE"] <- 0 #assigning '0' to consistent reported results
APA$DecisionError[APA$DecisionError == "TRUE"] <- 1 #assigning '1' to grossly inconsistent reported results
APA$DecisionError[APA$DecisionError == "FALSE"] <- 0 #assigning '0' to reported results which are not grossly inconsistent
#Assigning numbers to the different categories of the variable 'Reported.Comparison'.
APA$Reported.Comparison[which(APA$Reported.Comparison == "=")] <- 4
APA$Reported.Comparison[which(APA$Reported.Comparison == "<")] <- 1
APA$Reported.Comparison[which(APA$Reported.Comparison == ">")] <- 5
APA$Reported.Comparison[which(APA$Reported.Comparison == "ns")] <- 3
APA <- subset(APA, Result.Hypothesis >= 0 & Result.Hypothesis <= 1) #subset all relevant results
nrow(APA) #n = 505
#Assigning labels to the different categories of 'Result.Hypothesis'.
APA$Result.Hypothesis[which(APA$Result.Hypothesis == 0)] <- "Result not related to hypothesis"
APA$Result.Hypothesis[which(APA$Result.Hypothesis == 1)] <- "Result related to hypothesis"
APA_nd <- APA[!duplicated(APA$Article_numb), ]  #removing duplicates to obtain number of articles
nrow(APA_nd) #n = 76
APA$Comp_n <- as.numeric(APA$Computed) #converting recalculated p-values to numeric values
#Setting working directory
setwd("..")
setwd("./Data")
#Reading in 'AllP'
AllP <- read_excel("./AllP/AllP.xlsx", col_types = c(
#Article_numb, Article, Author(s), Journal
"numeric", "text", "text", "text",
#Year, Statistic, Reported.Comparison, Reported.P.Value
"numeric", "text", "text", "numeric",
#Raw, Result.Table, Reported.Not.Relevant, Not.Reported
"text", "numeric", "numeric", "numeric",
#Model.fit, Result.Hypothesis, Marg.Sig, Phrase in which mentioned
"numeric", "numeric", "numeric", "text",
#explicitly stated hypothesis, Comments
"text", "text"))
AllP <- subset(AllP, Article_numb >= 0) #only taking into account results with an article number (others are blank rows)
AllP_nd <- AllP[!duplicated(AllP$Article_numb), ] #calculating number of articles
nrow(AllP_nd) #there are 471 articles in the data set
setwd("..")
setwd("./Data")
#Calling the data set with information on all articles.
Hyp_art <- read_excel("./Hyp & inclusion_Hyp/inclusion_Hyp.xlsx", col_types = c(
#Article, Author(s), Journal, Year
"text", "text", "text", "numeric",
#Issue, Hypotheses, Req_stat,
"numeric", "numeric", "numeric",
#Selected, Number, Comments
"numeric", "numeric", "text"))
Hyp_art <- subset(Hyp_art, Year > 2013 & Year < 2017) #removing blank rows
nrow(Hyp_art) #n = 322
Hyp_art_journal <- table(Hyp_art$Journal) #all articles split up by journal
Hyp_art_journal
#Numbers of articles with listed hypotheses
Hyp_art_hyp1 <- subset(Hyp_art, Hypotheses == 1) #all articles with listed hypotheses
nrow(Hyp_art_hyp1) #n = 99
Hyp_art_hyp1_journal <- table(Hyp_art_hyp1$Journal) #articles split by journal
Hyp_art_hyp1_journal
#Numbers of articles with listed hypotheses and at least one required statistic
Hyp_art_hyp1_stat <- subset(Hyp_art_hyp1, Req_stat == 1) #all articles with >= 1 required statistic
nrow(Hyp_art_hyp1_stat) #n = 91
Hyp_art_hyp1_stat_journal <- table(Hyp_art_hyp1_stat$Journal) #articles split by journal
Hyp_art_hyp1_stat_journal
setwd("..")
setwd("./Data")
Hyp <- read_excel("./Hyp & inclusion_Hyp/Hyp.xlsx", col_types = c(
#Article_numb, Article, Author(s), Journal
"numeric", "text", "text", "text",
#Year, Issue, Number of hypotheses, Belongs to hypothesis
"numeric", "numeric", "numeric", "numeric",
#Statistic, b, se, s_stat
"text", "numeric", "numeric", "numeric",
#n, IVs, df_1,df_2
"numeric", "numeric",  "numeric", "numeric",
#Reported.Comparison, Reported.P.Value, lb_b, ub_b
"text", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric", "numeric",
#dec_pval_rep, Computed, P_one_sided_chi, Error
"numeric", "numeric", "numeric", "numeric",
#DecisionError, OneTailed, Marg.sig, Hypothesis
"numeric", "text", "numeric", "text",
#Information from text article used, Comment
"text", "text"))
nrow(Hyp) #n = 4929
setwd("..") #set working directory to 'thesis'
setwd("./Data") #set working directory to 'Data'
APA <- read_excel("./APA/APA.xlsx") # loading the data set
nrow(APA) #n = 524
APA_u <- APA[!duplicated(APA$Article_numb), ] #removing duplicates to obtain the number of articles
nrow(APA_u) #n = 80
options(scipen = 999)
#Changing values assigned to variables in the data file.
APA$Error[APA$Error == "TRUE"] <- 1 #assigning '1' to inconsistent reported results
APA$Error[APA$Error == "FALSE"] <- 0 #assigning '0' to consistent reported results
APA$DecisionError[APA$DecisionError == "TRUE"] <- 1 #assigning '1' to grossly inconsistent reported results
APA$DecisionError[APA$DecisionError == "FALSE"] <- 0 #assigning '0' to reported results which are not grossly inconsistent
#Assigning numbers to the different categories of the variable 'Reported.Comparison'.
APA$Reported.Comparison[which(APA$Reported.Comparison == "=")] <- 4
APA$Reported.Comparison[which(APA$Reported.Comparison == "<")] <- 1
APA$Reported.Comparison[which(APA$Reported.Comparison == ">")] <- 5
APA$Reported.Comparison[which(APA$Reported.Comparison == "ns")] <- 3
APA <- subset(APA, Result.Hypothesis >= 0 & Result.Hypothesis <= 1) #subset all relevant results
nrow(APA) #n = 505
#Assigning labels to the different categories of 'Result.Hypothesis'.
APA$Result.Hypothesis[which(APA$Result.Hypothesis == 0)] <- "Result not related to hypothesis"
APA$Result.Hypothesis[which(APA$Result.Hypothesis == 1)] <- "Result related to hypothesis"
APA_nd <- APA[!duplicated(APA$Article_numb), ]  #removing duplicates to obtain number of articles
nrow(APA_nd) #n = 76
APA$Comp_n <- as.numeric(APA$Computed) #converting recalculated p-values to numeric values
