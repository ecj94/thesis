/**
 * @file
 *  Add journal back button.
 */
Sage.Content = Sage.Content || {};
Drupal.settings = Drupal.settings || {};

(function ($) {

  Drupal.behaviors.journalBackButton = {
    attach: function(context) {
      Sage.Content.journalBackButton.initialize(context);
    }
  };

  // If a user comes from any page on the sage journals platform, the back button
  // will take them to the journal platform homepage. For all other cases, we will
  // implement the native back behaviour.
  Sage.Content.journalBackButton = {

    // Back button to insert.
    $button: $('<a />').addClass('active back-button'),

    initialize: function(context) {
      this.attachSageJournalButton(context);
    },

    showButton: function(context) {
      $('#journal-back-placeholder', context).replaceWith(this.$button);
      return this.$button;
    },

    attachSageJournalButton: function(context) {
      if (this.isSageJournalReferral()) {
        this.showButton(context).attr('href', Sage.referrer.getURI()).text(Drupal.t('Back to Journal Content'));
      }
    },

    isSageJournalReferral: function() {
      return Sage.referrer.getUrlHostname() == this.getSageJournalsUrl();
    },

    getSageJournalsUrl: function() {
      return typeof Drupal.settings.Sage.Content.sageJournalsUrl != 'undefined' ? Drupal.settings.Sage.Content.sageJournalsUrl : '';
    }
  };
})(jQuery);
;
Sage.ApacheSolr = Sage.ApacheSolr || {};

(function ($) {

    Sage.ApacheSolr.ThemeBookModule = (function () {
    /**
     * Private variable toohold the data of a book for rendering
     * @type {{}}
     * @private
     */
    _data = {};
    impressions = [];
    var clickObj = {};
    var impressionsObj = {};
    var i = 1;

    /**
     * @returns {string}
     */
    function image() {
      return _data.bestseller ? '<div class="bestseller">' + _data.image + '</div>' : _data.image;
    }

    /**
     * To check if it is a vantage product.
     *
     * @returns {string}
     */
    function isVantage() {
        return _data.vantage;
    }
    /**
     * @returns {string}
     */
    function title() {
      var output = isVantage() ? '<div class="paragraph-spacing text-small margin-top">' : '<div class="paragraph-spacing text-small">';
      output += '<a href="' + _data.path + '" class="color-smooth-grey strong anchor-camouflaged">' + _data.title + '</a>';
      if (_data.subtitle) {
        output += '<div class="color-warm-grey">' + _data.subtitle + '</div>';
      }
      output += '</div>';
      return output;
    }

    /**
     * @returns {string}
     */
    function description() {
      return _data.description ? '<p>' + _data.description + ' ...</p>' : '';
    }

    /**
     * @returns {string}
     */
    function classificationBanner() {
      var output = '';
      if (_data.classification_group) {
        output += '<div class="text-uppercase border-bottom border--thin inherit-brand-border text-small clearfix margin-bottom">';
        output += '<div class="inherit-brand-fill l-element-left margin-right--small margin-bottom--small">' + _data.classification_icon + '</div>';
        output += _data.classification_group;
        output += '</div>';
      }
      return output;
    }

    /**
     * @returns {string}
     */
    function authors() {
      var output = '';
      if (_data.contributors) {
        output += '<div class="text-small strong">';
        output += _data.contributors.map(function (contributor) {
          return '<a href="' + contributor.path + '" class="anchor-camouflaged">' + contributor.name + '</a>';
        })
          .join(', ');
        output += '</div>';
      }
      return output;
    }

    /**
     * @returns {string}
     */
    function publicationDate() {
      if (!_data.publication_date) {
        return ''
      }
      var output = '';
      output += '<div class="text-small product-date-publication-dates margin-bottom">';
      output += Drupal.t('Published') + ': ' + _data.publication_date;
      output += '</div>';
      return output;
    }

    /**
     * @returns {string}
     */
    function purchaseOptions() {
      var output = '';
      output += '<div class="text-tiny purchase-options-block margin-bottom--small">';
      output += _data.purchase_options;
      output += '</div>';
      return output;
    }

    function extraLinks() {
      var output = '';
      if (_data.is_review_available) {
        output += '<div class="text-small">';
        output += '<a href="' + _data.path + '" class="brand-color-1">' + Drupal.t('Review copy available') + '</a>';
        output += '</div>';
      }
      if (_data.companion_links) {
        output += '<div class="text-small">';
        output += _data.companion_links.map(function (companion_link) {
          return '<div>' + companion_link + '</div>';
        }).join(' ');
        output += '</div>';
      }
      return output;
    }

    return {

      init: function () {
        var containers = document.querySelectorAll("[render-nodes-container]");
        if (containers.length) {
          containers = Array.apply(null, containers);
          containers.map(function (container) {
            return this.renderContainer(container, 'resultsAsGrid');
          }.bind(this));
          Drupal.attachBehaviors(containers, Drupal.settings);
        }

        $("#search-result a").on('click', function (e) {
          var click = [];
          click = JSON.parse($(this).parents("#search-result").attr("datalayer-info"));
          clickObj = {"click": click };
          dataLayer.push({
              event: 'eec.productClick',
              ecommerce: clickObj
          });
        });
      },

      /**
       *
       * @param container
       * @param style
       */
      renderContainer: function (container, style) {
          var _nodes = container.querySelectorAll('[search-result-id]');
          _nodes = Array.apply(null, _nodes);
          this[style](_nodes).map(function (node) {
              if (node.nodeType) {
                  container.appendChild(node);
              }
          });

      },

      /**
       *
       * @param node
       * @param style
       * @returns {*}
       */
      renderNode: function (node, style) {
        node.innerHTML = this[style](JSON.parse(node.getAttribute('node-info')));
        return node;
      },

      /**
       * Function for theming search results into grid pattern.
       *
       * @param items
       * @returns {*|string}
       */
      resultsAsGrid: function (items) {
        items = items.map(function (node) {
         return this.renderNode(node, 'themeGridItem');
        }.bind(this));

        var chunks = items.chunk(4);
        chunks =  chunks.map(function (chunk) {
         var row = document.createElement("div");
          row.className = 'row row-spacing--l';
          for (var i in chunk) {
            row.appendChild(chunk[i]);
          }
          return row;
        });

        return chunks;
      },

        resultsWithoutSwitcher: function (items) {
            items = items.map(function (node) {
                return this.renderNode(node, 'themeGridItem');
            }.bind(this));

            var chunks = items.chunk(4);
            return chunks;
        },

      /**
       * Function for theming search results into list pattern.
       *
       * @param items
       * @returns {*|string}
       */
      resultsAsList: function (items) {
        return items.map(function (node) {
          return this.renderNode(node, 'themeListItem');
        }.bind(this));
      },

      /**
       * Search result (grid) theme
       * @param {object} data
       * @returns {string}
       */
      themeGridItem: function (data) {
        _data = data;
        var output = '';

        output += '<article class="col-sm-6 col-md-3 col-spacing--l margin-bottom--large brand-parent--' + data.brand_parent + '">';
        output += isVantage() ? '<div class="cover-wrapper cover-vantage padding-bottom text-center">' + image() + '</div>'
            : '<div class="product-wrapper"><div class="cover-wrapper padding-bottom text-center">' + image() + '</div></div>';
        output += classificationBanner();
        output += title();
        output += authors();
        output += publicationDate();
        output += purchaseOptions();
        output += extraLinks();

        output += '</article>';
        return output;
      },

      /**
       * Search result (grid) theme
       * @param {object} data
       * @returns {string}
       */
      themeListItem: function (data) {
        _data = data;
        var output = '';
        output += '<article id="search-result" class="margin-bottom--extra-large brand-parent--' + data.brand_parent + '">';
        output += '<div class="media">';
        output += '<div class="media-master">';
        output += '<div class="text-center">' + image() + '</div>';
        output += classificationBanner();
        output += '</div>';
        output += '<div class="media-body">';
        output += title();
        output += authors();
        output += publicationDate();
        output += description();
        output += purchaseOptions();
        output += extraLinks();
        output += '</div>';
        output += '</div>';
        output += '</article>';
        return output;
      }
    };
  }());

    // Pushing data layer.
    jQuery(window).bind('load', function () {
        if (dataLayer) {
          impressionsObj = {"impressions": impressions};
            if (impressions.length > 0) {
                dataLayer.push(
                    {
                        event: 'eec.impressionView',
                        ecommerce: impressionsObj
                    });
            }
        }
  });

})(jQuery);



;
/**
 * @file
 *  Add journal contributor links.
 */
Sage.Content = Sage.Content || {};
Drupal.settings = Drupal.settings || {};

(function ($) {

  Drupal.behaviors.journalContributorLinks = {
    attach: function(context) {
      Sage.Content.journalContributorLinks.initialize(context);
    }
  };

  Sage.Content.journalContributorLinks = {

    initialize : function(context) {
      this.addHrefAttributes(context);
    },

    addHrefAttributes : function(context) {
      $('a[data-contributor]', context).once('attach-href', function() {
        var $link = $(this);
        $link.attr('href', Sage.Content.journalContributorLinks.getContributorUrl($link.attr('data-contributor')));
      });
    },

    getContributorUrl: function(contributorId) {
      return typeof Drupal.settings.Sage.Content.contributorUrls[contributorId] != 'undefined' ? Drupal.settings.Sage.Content.contributorUrls[contributorId] : '';
    }
  };
})(jQuery);
;

(function($) {

/**
 * Drupal FieldGroup object.
 */
Drupal.FieldGroup = Drupal.FieldGroup || {};
Drupal.FieldGroup.Effects = Drupal.FieldGroup.Effects || {};
Drupal.FieldGroup.groupWithfocus = null;

Drupal.FieldGroup.setGroupWithfocus = function(element) {
  element.css({display: 'block'});
  Drupal.FieldGroup.groupWithfocus = element;
}

/**
 * Implements Drupal.FieldGroup.processHook().
 */
Drupal.FieldGroup.Effects.processFieldset = {
  execute: function (context, settings, type) {
    if (type == 'form') {
      // Add required fields mark to any fieldsets containing required fields
      $('fieldset.fieldset', context).once('fieldgroup-effects', function(i) {
        if ($(this).is('.required-fields') && $(this).find('.form-required').length > 0) {
          $('legend span.fieldset-legend', $(this)).eq(0).append(' ').append($('.form-required').eq(0).clone());
        }
        if ($('.error', $(this)).length) {
          $('legend span.fieldset-legend', $(this)).eq(0).addClass('error');
          Drupal.FieldGroup.setGroupWithfocus($(this));
        }
      });
    }
  }
}

/**
 * Implements Drupal.FieldGroup.processHook().
 */
Drupal.FieldGroup.Effects.processAccordion = {
  execute: function (context, settings, type) {
    $('div.field-group-accordion-wrapper', context).once('fieldgroup-effects', function () {
      var wrapper = $(this);

      // Get the index to set active.
      var active_index = false;
      wrapper.find('.accordion-item').each(function(i) {
        if ($(this).hasClass('field-group-accordion-active')) {
          active_index = i;
        }
      });

      wrapper.accordion({
        heightStyle: "content",
        active: active_index,
        collapsible: true,
        changestart: function(event, ui) {
          if ($(this).hasClass('effect-none')) {
            ui.options.animated = false;
          }
          else {
            ui.options.animated = 'slide';
          }
        }
      });

      if (type == 'form') {

        var $firstErrorItem = false;

        // Add required fields mark to any element containing required fields
        wrapper.find('div.field-group-accordion-item').each(function(i) {

          if ($(this).is('.required-fields') && $(this).find('.form-required').length > 0) {
            $('h3.ui-accordion-header a').eq(i).append(' ').append($('.form-required').eq(0).clone());
          }
          if ($('.error', $(this)).length) {
            // Save first error item, for focussing it.
            if (!$firstErrorItem) {
              $firstErrorItem = $(this).parent().accordion("activate" , i);
            }
            $('h3.ui-accordion-header').eq(i).addClass('error');
          }
        });

        // Save first error item, for focussing it.
        if (!$firstErrorItem) {
          $('.ui-accordion-content-active', $firstErrorItem).css({height: 'auto', width: 'auto', display: 'block'});
        }

      }
    });
  }
}

/**
 * Implements Drupal.FieldGroup.processHook().
 */
Drupal.FieldGroup.Effects.processHtabs = {
  execute: function (context, settings, type) {
    if (type == 'form') {
      // Add required fields mark to any element containing required fields
      $('fieldset.horizontal-tabs-pane', context).once('fieldgroup-effects', function(i) {
        if ($(this).is('.required-fields') && $(this).find('.form-required').length > 0) {
          $(this).data('horizontalTab').link.find('strong:first').after($('.form-required').eq(0).clone()).after(' ');
        }
        if ($('.error', $(this)).length) {
          $(this).data('horizontalTab').link.parent().addClass('error');
          Drupal.FieldGroup.setGroupWithfocus($(this));
          $(this).data('horizontalTab').focus();
        }
      });
    }
  }
}

/**
 * Implements Drupal.FieldGroup.processHook().
 */
Drupal.FieldGroup.Effects.processTabs = {
  execute: function (context, settings, type) {
    if (type == 'form') {

      var errorFocussed = false;

      // Add required fields mark to any fieldsets containing required fields
      $('fieldset.vertical-tabs-pane', context).once('fieldgroup-effects', function(i) {
        if ($(this).is('.required-fields') && $(this).find('.form-required').length > 0) {
          $(this).data('verticalTab').link.find('strong:first').after($('.form-required').eq(0).clone()).after(' ');
        }
        if ($('.error', $(this)).length) {
          $(this).data('verticalTab').link.parent().addClass('error');
          // Focus the first tab with error.
          if (!errorFocussed) {
            Drupal.FieldGroup.setGroupWithfocus($(this));
            $(this).data('verticalTab').focus();
            errorFocussed = true;
          }
        }
      });
    }
  }
}

/**
 * Implements Drupal.FieldGroup.processHook().
 *
 * TODO clean this up meaning check if this is really
 *      necessary.
 */
Drupal.FieldGroup.Effects.processDiv = {
  execute: function (context, settings, type) {

    $('div.collapsible', context).once('fieldgroup-effects', function() {
      var $wrapper = $(this);

      // Turn the legend into a clickable link, but retain span.field-group-format-toggler
      // for CSS positioning.

      var $toggler = $('span.field-group-format-toggler:first', $wrapper);
      var $link = $('<a class="field-group-format-title" href="#"></a>');
      $link.prepend($toggler.contents());

      // Add required field markers if needed
      if ($(this).is('.required-fields') && $(this).find('.form-required').length > 0) {
        $link.append(' ').append($('.form-required').eq(0).clone());
      }

      $link.appendTo($toggler);

      // .wrapInner() does not retain bound events.
      $link.click(function () {
        var wrapper = $wrapper.get(0);
        // Don't animate multiple times.
        if (!wrapper.animating) {
          wrapper.animating = true;
          var speed = $wrapper.hasClass('speed-fast') ? 300 : 1000;
          if ($wrapper.hasClass('effect-none') && $wrapper.hasClass('speed-none')) {
            $('> .field-group-format-wrapper', wrapper).toggle();
          }
          else if ($wrapper.hasClass('effect-blind')) {
            $('> .field-group-format-wrapper', wrapper).toggle('blind', {}, speed);
          }
          else {
            $('> .field-group-format-wrapper', wrapper).toggle(speed);
          }
          wrapper.animating = false;
        }
        $wrapper.toggleClass('collapsed');
        return false;
      });

    });
  }
};

/**
 * Behaviors.
 */
Drupal.behaviors.fieldGroup = {
  attach: function (context, settings) {
    settings.field_group = settings.field_group || Drupal.settings.field_group;
    if (settings.field_group == undefined) {
      return;
    }

    // Execute all of them.
    $.each(Drupal.FieldGroup.Effects, function (func) {
      // We check for a wrapper function in Drupal.field_group as
      // alternative for dynamic string function calls.
      var type = func.toLowerCase().replace("process", "");
      if (settings.field_group[type] != undefined && $.isFunction(this.execute)) {
        this.execute(context, settings, settings.field_group[type]);
      }
    });

    // Fixes css for fieldgroups under vertical tabs.
    $('.fieldset-wrapper .fieldset > legend').css({display: 'block'});
    $('.vertical-tabs fieldset.fieldset').addClass('default-fallback');

    // Add a new ID to each fieldset.
    $('.group-wrapper .horizontal-tabs-panes > fieldset', context).once('group-wrapper-panes-processed', function() {
      // Tats bad, but we have to keep the actual id to prevent layouts to break.
      var fieldgroupID = 'field_group-' + $(this).attr('id');
      $(this).attr('id', fieldgroupID);
    });
    // Set the hash in url to remember last userselection.
    $('.group-wrapper ul li').once('group-wrapper-ul-processed', function() {
      var fieldGroupNavigationListIndex = $(this).index();
      $(this).children('a').click(function() {
        var fieldset = $('.group-wrapper fieldset').get(fieldGroupNavigationListIndex);
        // Grab the first id, holding the wanted hashurl.
        var hashUrl = $(fieldset).attr('id').replace(/^field_group-/, '').split(' ')[0];
        window.location.hash = hashUrl;
      });
    });

  }
};

})(jQuery);
;
/**
 * @file
 *  Anchor based behaviours.
 */
Sage.Content = Sage.Content || {};

(function ($) {

  // We only want to initialize this once, and it's not attached to any element so we can not use once.
  $(document).ready(function() {
    Sage.Content.Anchor.initialize();
  });

  Sage.Content.Anchor = {

    TYPE_ISBN : 'isbn',

    TYPE_PREVIEW : 'preview',

    initialize : function() {
      var fragment = this.getUrlFragment();
      if (fragment) {
        var trimmed = fragment.replace(/-/g, '');
        var elements = $('[anchor="' + fragment + '"], [anchor="' + trimmed + '"]');
        elements.each($.proxy(this.processAnchor, this));
      }
    },

    getUrlFragment : function() {
      var fragment = Sage.path.getUrlFragment();
      return fragment.replace(/^#/, '');
    },

    processAnchor : function(idx, element) {
      switch (this.getType(element)) {
        case this.TYPE_ISBN:
          this.processISBN(element);
          break;
      }
    },

    getType : function(element) {
      return $(element).attr('anchor-type');
    },

    processISBN : function(element) {
      var product = $(element).parent('div').attr('product');
      var select = $('#sage-commerce-purchase-options-select');
      select.val(product).change();
      $(element).addClass('strong');
    }

  }

})(jQuery);;

(function($) {

/**
 * Behaviors.
 */
Drupal.behaviors.BootstrapFieldgroup = {
  attach: function (context, settings) {

    var mutateForm = function($nav_type) {

      switch ($nav_type.val()) {
        case 'tabs':
          $('.bootstrap-fieldgroup-orientation option:odd').show();
          break;
        default:
          $orientation = $('.bootstrap-fieldgroup-orientation');
          if (1 == $orientation.val() % 2) {
            $orientation.val(0);
          }
          $('.bootstrap-fieldgroup-orientation option:odd').hide();
          break;
      }
    };

    $('.bootstrap-fieldgroup-nav-type', context).on('change', function() {
      mutateForm($(this));
    });

    mutateForm($('.bootstrap-fieldgroup-nav-type'));

    // Check location hash against hrefs.
    function checkHashes() {

      function checkShow(selector, fn) {

        $(selector).each(function() {
          if (window.location.hash === $(this).attr('href')) {
            fn($(this));
            // console.log(method);
            // $(this)[method]('show');
          }
        });
      }

      checkShow('.nav a', function ($element) {
        $element.tab('show');
      });
      checkShow('.panel-group a', function ($element) {
        $element.closest('.panel').find('.panel-collapse').collapse('show');
      });
    }
    checkHashes();
    $(window).on('hashchange', checkHashes);
  }
};

/**
 * Implements Drupal.FieldGroup.processHook().
 */
Drupal.FieldGroup = Drupal.FieldGroup || {};
Drupal.FieldGroup.Effects = Drupal.FieldGroup.Effects || {};
Drupal.FieldGroup.Effects.processBootstrap_Fieldgroup_Nav = {
  execute: function (context, settings, type) {

    if (type == 'form') {

      // Add required fields mark to any element containing required fields
      $('ul.nav', context).once('fieldgroup-effects', function(i) {

        $('li', this).each(function() {

          if ($(this).is('.required-fields')) {

            var $link = $('a', this);
            var $group = $(this).closest('.bootstrap-nav-wrapper');
            var $pane = $('.tab-content', $group).find($link.attr('href'));
            if ($pane.find('.form-required').length > 0) {
              $link.append(' ').append($('.form-required').eq(0).clone());
            }
          }
        });
      });
    }
  }
};

})(jQuery);;
/**
 * @file
 * Javascript behaviors for sage form validation.
 */
Drupal.formValidation = Drupal.formValidation || {};

(function ($) {

  Drupal.formValidation = {

    init : function(context) {
      $('.form', context).each($.proxy(this.formDisplayValidation, this));
    },

    formDisplayValidation : function(index, form) {
      var errors = $('.form-item .error', form);
      if (errors.length) {
        $('.form-item', form).each(this.addValidationIconToItem);
      }
    },

    addValidationIconToItem : function(index, el) {
      var normal_checkbox = $(':checkbox', el).length && !$(':checkbox', el).hasClass('required');
      if (!normal_checkbox) {
        $('.validation-container', el).html('<span class="validation-icon"></span>');
      }
    }

  };

  Drupal.behaviors.formValidation = {
    attach : function(context) {
      Drupal.formValidation.init(context);
    }
  };

})(jQuery);
;
